import { Context, MessageContext } from 'vk-io'
import { HearManager } from "@vk-io/hear"

import { config } from '../../config'

import { commands as commandsService } from '../services'
import { IdsValidator } from '../utils'

const startHandler = async (context: Context) => {
    await context.send('–ü—Ä–∏–≤–µ—Ç')
}

const banWords: string[] = ['–±–∞–Ω', '–Ω—É —ç—Ç–æ –±–∞–Ω', '–±–∞–Ω —Ç–µ–±–µ', 'üëé', '–æ—Å—É–∂–¥–∞—é', '—ç—Ç–æ –±–∞–Ω']
const banResponses: string[] = ['–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é', '–¢—É–¥–∞ –µ–≥–æ', '–¢–∞–∫ –µ–º—É –∏ –Ω–∞–¥–æ']
const banHandler = async (context: MessageContext) => {
    const [type, result] = new IdsValidator(
        'forward',
        context,
        {
            noReply: '–î—É—Ä–∞–∫ –±–ª—è, –∫–æ–º—É —è –±–∞–Ω –ø—Ä–æ–ø–∏—Å–∞—Ç—å –¥–æ–ª–∂–µ–Ω?\n–¢–µ–±–µ –º–æ–∂–µ—Ç –ø—Ä–æ–ø–∏—Å–∞—Ç—å?\n–ß—Ç–æ–± –∑–Ω–∞–ª, —á—Ç–æ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å –Ω–∞–¥–æ',
            normalReply: (val) => `${banResponses[Math.floor(Math.random() * banResponses.length)]}\n${val} - –∞ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –±–∞–Ω–æ–≤`,
            selfReply: (val) => `–°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∏–ª—Å—è, –ø–æ–ª—É—á–∞–µ—Ç—è\n–ù—É –ª–∞–¥–Ω–æ, –º–µ—à–∞—Ç—å –Ω–µ –±—É–¥—É\n–ö—Å—Ç–∞, ${val} - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö –±–∞–Ω–æ–≤`,
            replyToBot: '–°–µ–±–µ –±–∞–Ω –ø—Ä–æ–ø–∏—à–∏'
        }
    ).validate()


    if ([IdsValidator.ResultTypes.selfReply, IdsValidator.ResultTypes.normalReply].includes(type) && context.replyMessage) {
        const newBansCount = await commandsService.addBans(context.peerId, context.replyMessage.senderId)
        if (newBansCount && typeof result === 'function') await context.send((() => result(`${newBansCount}`))())
    }
    else if (typeof result === 'string') await context.send(result)
    else await context.send('–£ –º–æ–µ–≥–æ —Ä–∞–±–∞, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è —Å–æ–∑–¥–∞–ª, –±–µ–¥—ã —Å –±–∞—à–∫–æ–π, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–æ–º–Ω—é, –∫–∞–∫ –º–Ω–µ –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å')
}

const respectWords: string[] = ['+rep', '—Ä–µ—Å–ø–µ–∫—Ç', '—Ä–µ–ø+', '–∫—Ä–∞—Å–∞–≤–∞', '–∫—Ä–∞—Å–∞–≤—á–∏–∫', 'üëç']
const respectResponses: string[] = ['–ù—É –≤—ã –ø–æ—Å–º–æ—Ç—Ä–∏–µ—Ç –Ω–∞ —ç—Ç–æ–≥–æ –∫—Ä–∞—Å–∞–≤—Ü–∞', '–ú–æ–µ —É–≤–∞–∂–µ–Ω–∏–µ, —É–≤–∞–∂–∞–µ–º—ã–π', '–ú–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ', '–ù–µ, –Ω—É –≤—ã –ø—Å–æ–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ']
const respectHandler = async (context: MessageContext) => {
    const [type, result] = new IdsValidator(
        'forward',
        context,
        {
            noReply: '–ö–æ–º—É —Ä–µ—Å–ø–µ–∫—Ç —Ç–æ? –ö–æ–º—É? –ù–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—å, –¥—É—Ä–∞–∫',
            normalReply: (val) => `${respectResponses[Math.floor(Math.random() * banResponses.length)]}\n${val} - –∞ —ç—Ç–æ –µ–≥–æ —Ä–µ—Å–ø–µ–∫—Ç`,
            selfReply: '–£ –Ω–∞—Å —Ç—É—Ç —Ç–∞–∫ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ',
            replyToBot: '–õ—è, –ø–∞—Å–∏–±–æ, –Ω–æ –≤–∞–º, –∂–∞–ª–∫–∏–º, –º–µ–Ω—è –∏ —Ç–∞–∫ –Ω–µ –¥–æ–≥–Ω–∞—Ç—å'
        }
    ).validate()

    // console.log(type, context)

    if ([IdsValidator.ResultTypes.normalReply].includes(type) && context.replyMessage) {
        const newRespectCount = await commandsService.addRespect(context.peerId, context.replyMessage.senderId)
        if (newRespectCount && typeof result === 'function') await context.send((() => result(`${newRespectCount}`))())
    }
    else if (typeof result === 'string') await context.send(result)
    else await context.send('–£ –º–æ–µ–≥–æ —Ä–∞–±–∞, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è —Å–æ–∑–¥–∞–ª, –±–µ–¥—ã —Å –±–∞—à–∫–æ–π, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–æ–º–Ω—é, –∫–∞–∫ –º–Ω–µ –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å')
}

const index = (hearManager: HearManager<Context>): void => {
    hearManager.hear('/start', startHandler)

    hearManager.hear(
        (
            value: string | undefined,
            context: Context
        ): boolean => {
            if (value && banWords.includes(value.toLowerCase())) return true
            else return false
        },
        banHandler
    )
    hearManager.hear(
        (
            value: string | undefined,
            context: Context
        ): boolean => {
            if (value && respectWords.includes(value.toLowerCase())) return true
            return false
        },
        respectHandler
    )
}

export default index