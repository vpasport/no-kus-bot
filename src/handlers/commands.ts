import { Context, MessageContext } from 'vk-io'
import { HearManager } from "@vk-io/hear"

import { commands as commandsService } from '../services'
import { IdsValidator } from '../utils'

// const startHandler = async (context: Context) => {
//     await context.send('–ü—Ä–∏–≤–µ—Ç')
// }

const getStatHandler = async (context: MessageContext) => {
    const result = await commandsService.getStats(context.peerId)

    await context.send(result)
    await context.send({ sticker_id: 51664 })
}

const banResponses: string[] = ['–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é', '–¢—É–¥–∞ –µ–≥–æ', '–¢–∞–∫ –µ–º—É –∏ –Ω–∞–¥–æ', '–ó–∞—Å–ª—É–∂–∏–ª, –∫–∞–∫ –ø–æ –º–Ω–µ', '–°—ã–≥–ª—ã', '–°–æ–≥–ª–∞—Å–µ–Ω']
const banHandler = async (context: MessageContext) => {
    const [type, result] = new IdsValidator(
        'forward',
        context,
        {
            noReply: () => context.reply('–î—É—Ä–∞–∫ –±–ª—è, –∫–æ–º—É —è –±–∞–Ω –ø—Ä–æ–ø–∏—Å–∞—Ç—å –¥–æ–ª–∂–µ–Ω?\n–¢–µ–±–µ –º–æ–∂–µ—Ç –ø—Ä–æ–ø–∏—Å–∞—Ç—å?\n–ß—Ç–æ–± –∑–Ω–∞–ª, —á—Ç–æ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å –Ω–∞–¥–æ'),
            normalReply: (val) => context.reply(`${banResponses[Math.floor(Math.random() * banResponses.length)]}\n${val} - –∞ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –±–∞–Ω–æ–≤`),
            selfReply: (val) => context.reply(`–°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∏–ª—Å—è, –ø–æ–ª—É—á–∞–µ—Ç—è\n–ù—É –ª–∞–¥–Ω–æ, –º–µ—à–∞—Ç—å –Ω–µ –±—É–¥—É\n–ö—Å—Ç–∞, ${val} - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö –±–∞–Ω–æ–≤`),
            replyToBot: () => context.reply('–°–µ–±–µ –±–∞–Ω –ø—Ä–æ–ø–∏—à–∏'),
            replyToOtherBot: (val) => context.reply(`${banResponses[Math.floor(Math.random() * banResponses.length)]}\n${val} - –∞ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –±–∞–Ω–æ–≤`),
        }
    ).validate()

    if (typeof result === 'function') {
        if (type !== IdsValidator.ResultTypes.noReply) {
            const newBansCount = await commandsService.addBans(context.peerId, context.replyMessage!.senderId)

            if (newBansCount) {
                await result(`${newBansCount}`)
                return
            }
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–∞–Ω–æ–≤')
        } else {
            result()
            return
        }
    }

    await context.send('–£ –º–æ–µ–≥–æ —Ä–∞–±–∞, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è —Å–æ–∑–¥–∞–ª, –±–µ–¥—ã —Å –±–∞—à–∫–æ–π, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–æ–º–Ω—é, –∫–∞–∫ –º–Ω–µ –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å')
}

const respectResponses: string[] = ['–ù—É –≤—ã –ø–æ—Å–º–æ—Ç—Ä–∏–µ—Ç –Ω–∞ —ç—Ç–æ–≥–æ –∫—Ä–∞—Å–∞–≤—Ü–∞', '–ú–æ–µ —É–≤–∞–∂–µ–Ω–∏–µ, —É–≤–∞–∂–∞–µ–º—ã–π', '–ú–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ', '–ù–µ, –Ω—É –≤—ã –ø—Å–æ–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ']
const respectHandler = async (context: MessageContext) => {
    const [type, result] = new IdsValidator(
        'forward',
        context,
        {
            noReply: () => context.reply('–ö–æ–º—É —Ä–µ—Å–ø–µ–∫—Ç —Ç–æ? –ö–æ–º—É? –ù–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—å, –¥—É—Ä–∞–∫'),
            normalReply: (val) => context.reply(`${respectResponses[Math.floor(Math.random() * banResponses.length)]}\n${val} - –∞ —ç—Ç–æ –µ–≥–æ —Ä–µ—Å–ø–µ–∫—Ç`),
            selfReply: () => context.reply('–£ –Ω–∞—Å —Ç—É—Ç —Ç–∞–∫ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ'),
            replyToBot: () => context.reply('–õ—è, –ø–∞—Å–∏–±–æ, –Ω–æ –≤–∞–º, –∂–∞–ª–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏—è–º, –º–µ–Ω—è –∏ —Ç–∞–∫ –Ω–µ –¥–æ–≥–Ω–∞—Ç—å'),
            replyToOtherBot: () => context.reply('–ù–µ –Ω–µ –Ω–µ\n–≠—Ç–æ–º—É —è –Ω–∏—á–µ–≥–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–µ –±—É–¥—É')
        }
    ).validate()

    if (typeof result === 'function') {
        if (type === IdsValidator.ResultTypes.normalReply) {
            const newRespectsCount = await commandsService.addRespect(context.peerId, context.replyMessage!.senderId)

            if (newRespectsCount) {
                await result(`${newRespectsCount}`)
                return
            }
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Å–ø–µ–∫—Ç–æ–≤')
        } else {
            result()
            return
        }
    }

    await context.send('–£ –º–æ–µ–≥–æ —Ä–∞–±–∞, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è —Å–æ–∑–¥–∞–ª, –±–µ–¥—ã —Å –±–∞—à–∫–æ–π, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–æ–º–Ω—é, –∫–∞–∫ –º–Ω–µ –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å')
}

const index = (hearManager: HearManager<Context>): void => {
    // hearManager.hear('/start', startHandler)
    hearManager.hear('/stats', getStatHandler)

    hearManager.hear(
        (value: string | undefined): boolean => !!value && /\s?(–±–∞–Ω|ban|–æ—Å—É–∂–¥–∞—é|üëé)\s?/gm.test(value.toLowerCase()),
        banHandler
    )
    hearManager.hear(
        (value: string | undefined): boolean =>
            !!value && /\s?(respect|—Ä–µ—Å–ø–µ–∫—Ç|—É–≤–∞–∂–µ–Ω–∏–µ|–∫—Ä–∞—Å–∞–≤–∞|–∫—Ä–∞—Å–∞–≤—á–∏–∫|—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ|–∑–∞–µ–±–∏—Å—å|üëç)\s?/gm.test(value.toLowerCase()),
        respectHandler
    )
}

export default index